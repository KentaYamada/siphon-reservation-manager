rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuth(auth) {
        return auth != null;
    }

    function hasId(id) {
        return id != null;
    }

    function validationBusinessDaySchema(businessDay) {
        return (businessDay.size() == 3) &&
               (businessDay.keys().hasAll(["business_date", "published_datetime", "is_pause"])) &&
               (businessDay.business_date is timestamp) &&
               (businessDay.published_datetime == null || (businessDay.business_date != null && businessDay.published_datetime is timestamp)) &&
               (businessDay.is_pause is bool);
    }

    function validationSelectableTimezoneSchema(timezone) {
        return (timezone.size() == 3) &&
               (timezone.keys().hasAll(["start_time", "end_time", "selected"])) &&
               (timezone.start_time is timestamp) &&
               (timezone.end_time is timestamp) &&
               (timezone.selected is bool);
    }

    // [GET] /business_days/{document}
    match /business_days/{document} {
      allow list;

      // [GET] /business_days/{document}/timezones/{document}
      match /timezones/{document} {
        allow list;
      }
    }

    // [GET] /business_days/{businessDayId}
    match /business_days/{businessDayId} {
      allow get: if isAuth(request.auth);

      // [GET] /business_days/{businessDayId}/timezones/{timezoneId}
      match /timezones/{timezoneId} {
        allow get: if isAuth(request.auth);
      }
    }

    // [POST] /business_days/{document}
    match /business_days/{document} {
      allow create: if isAuth(request.auth) &&
                       validationBusinessDaySchema(request.resource.data);

      // [POST] /business_days/{document}/timezones/{document}
      match /timezones/{document} {
        allow create: if isAuth(request.auth) &&
                         validationSelectableTimezoneSchema(request.resource.data);
      }
    }

    // [PUT] /business_days/{businessDayId}
    match /business_days/{businessDayId} {
      allow update: if isAuth(request.auth) &&
                       validationBusinessDaySchema(request.resource.data);

      // [PUT] /business_days/{businessDayId}/timezones/{timezoneId}
      match /timezones/{document} {
        allow create: if isAuth(request.auth) &&
                         validationSelectableTimezoneSchema(request.resource.data);
      }
      match /timezones/{timezoneId} {
        allow update: if isAuth(request.auth) &&
                         validationSelectableTimezoneSchema(request.resource.data);
      }
    }

    // [DELETE] /business_days/{businessDayId}
    match /business_days/{businessDayId} {
      allow delete: if isAuth(request.auth);

      // [DELETE] /business_days/{businessDayId}/timezones/{timezoneId}
      match /timezones/{timezoneId} {
        allow delete: if isAuth(request.auth);
      }
    }

    function validationReservationSchema(reservation) {
        return (reservation.size() == 13) &&
               (reservation.keys().hasAll([
                    "reservation_date",
                    "reservation_date_id",
                    "reservation_start_time",
                    "reservation_end_time",
                    "reservation_time_id",
                    "reserver_name",
                    "number_of_reservations",
                    "tel",
                    "mail", 
                    "comment",
                    "seats",
                    "created_at",
                    "modified_at"
                ])) &&
               (reservation.reservation_date is timestamp) &&
               (reservation.reservation_date_id is string) &&
               (reservation.reservation_start_time is timestamp) &&
               (reservation.reservation_end_time is timestamp) &&
               (reservation.reservation_time_id is string) &&
               (reservation.reserver_name is string) &&
               (reservation.number_of_reservations is number) &&
               (reservation.number_of_reservations > 0) &&
               (reservation.number_of_reservations <= 8) &&
               (reservation.tel is string) &&
               (reservation.mail is string) &&
               (reservation.comment is string) &&
               (reservation.seats is list) &&
               (reservation.created_at is timestamp) &&
               (reservation.modified_at is timestamp);
    }

    // [GET] /reservations
    match /reservations/{document} {
        allow list: if isAuth(request.auth);
    }

    // [GET] /reservations/{reservationId}
    match /reservations/{reservationId} {
      allow get: if hasId(reservationId);
    }

    // [POST] /reservations
    match /reservations/{document} {
        allow create: if validationReservationSchema(request.resource.data);
    }

    // [PUT] /reservation/{reservationId}
    match /reservations/{reservationId} {
        allow update: if validationReservationSchema(request.resource.data);
    }

    // [DELETE] /reservation/{reservationId}
    match /reservations/{reservationId} {
        allow delete: if hasId(reservationId);
    }

    function validationTimezoneSchema(timezone) {
        return (timezone.size() == 3) &&
               (timezone.keys().hasAll(["start_time", "end_time", "is_default_select"])) &&
               (timezone.start_time is timestamp) &&
               (timezone.end_time is timestamp) &&
               (timezone.is_default_select is bool);
    }

    // [GET] /timezones/{document}
    match /timezones/{document} {
        allow list: if isAuth(request.auth);
    }

    // [GET] /timezones/{timezoneId}
    match /timezones/{timezoneId} {
        allow get: if isAuth(request.auth);
    }

    // [POST] /timezones/{document}
    match /timezones/{document} {
        allow create: if isAuth(request.auth) &&
                         validationTimezoneSchema(request.resource.data);
    }

    // [PUT] /timezones/{timezoneId}
    match /timezones/{timezoneId} {
        allow update: if isAuth(request.auth) &&
                         validationTimezoneSchema(request.resource.data);
    }

    // [DELETE] /timezones/{timezoneId}
    match /timezones/{timezoneId} {
        allow delete: if isAuth(request.auth);
    }

    function validationNewYearDishesReservationSchema(data) {
        return (data.size() == 8) &&
               (data.keys().hasAll([
                 "quantity",
                 "reserver_name",
                 "address",
                 "tel",
                 "mail",
                 "comment",
                 "is_delivered",
                 "detail_url"])) &&
               (data.quantity is number) &&
               (data.quantity > 0) &&
               (data.reserver_name is string) &&
               (data.reserver_name != "") &&
               (data.address is string) &&
               (data.address != "") &&
               (data.tel is string) &&
               (data.tel != "") &&
               (data.mail is string) &&
               (data.mail != "") &&
               (data.comment is string) &&
               (data.is_delivered is bool) &&
               (data.detail_url is string) &&
               (data.detail_url != "");
    }

    match /new_year_dishes_reservations/{document} {
        allow create, update: if validationNewYearDishesReservationSchema(request.resource.data);
    }

    match /new_year_dishes_reservations/{document} {
        allow list: if true;
    }

    match /new_year_dishes_reservations/{id} {
        allow get, delete: if hasId(id);
    }

    function validationNewYearDishesSettingSchema(data) {
        return (data.size() == 9) &&
               (data.keys().hasAll([
                "start_datetime",
                "end_datetime",
                "delivery_date",
                "delivery_time_from",
                "delivery_time_to",
                "receptions",
                "max_quantity_per_reservation",
                "is_pause",
                "image"])) &&
               (data.start_datetime is timestamp) &&
               (data.end_datetime is timestamp) &&
               (data.delivery_date is timestamp) &&
               (data.delivery_time_from is timestamp) &&
               (data.delivery_time_to is timestamp) &&
               (data.receptions is number) &&
               (data.receptions > 0) &&
               (data.max_quantity_per_reservation is number) &&
               (data.max_quantity_per_reservation > 0) &&
               (data.is_pause is bool);
               // (data.image is) &&
    }

    // [GET] /new_year_dishes_setting/{id}
    match /new_year_dishes_settings/{id} {
        allow get: if true;
    }

    // [POST/PUT] /new_year_dishes_setting/{document}
    match /new_year_dishes_settings/{document} {
        allow create, update: if isAuth(request.auth) &&
                                 validationNewYearDishesSettingSchema(request.resource.data);
    }
  }
}
